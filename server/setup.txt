//////////////////////////////////////////
/// Testing
//////////////////////////////////////////
[1] Import test data into mongodb:
$mongo localhost:27017/mileage_test schema.js

[2] start server in test mode
node mileage.server.5002.js -m test

[3] run test 
npm test

[xx] set the target domain and test db_name in package.json and run npm test
"test": "env url=http://localhost:5002 db_name=mileage_test mocha --ui bdd -R spec test/**/*.test.js"
npm test

Note: to run by env
in my_app.js
app.configure('development', function(){
	app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
});

app.configure('production', function(){
	app.use(express.errorHandler());
});

 node my_app.js


	
	var db = new DB(app);



//////////////////////////////////////////
/// Production
//////////////////////////////////////////
env NODE_ENV=debug node mileage.server.5002.js
env NODE_ENV=test foever mileage.server.5002.js

//////////////////////////////////////////
/// Logging
//////////////////////////////////////////
[1] parse log by bunyan
node hi.js | ./node_modules/.bin/bunyan
bunyan foo.log -l error       # show only 'error' level records
bunyan foo.log -o short




[2] redis


[3] run test 
env KEY=YOUR_KEY mocha test/*.js
in code
var key = process.env.KEY;

To run remote test;
env mode='remote' mocha --ui bdd -R spec test/**/*.test.js

[4] install redis
apt-get update
apt-get upgrade

apt-get install redis-server
cp /etc/redis/redis.conf /etc/redis/redis.conf.default


///////////////////////////////////////////////////////
redis.conf

daemonize yes
pidfile /var/run/redis.pid
logfile /var/log/redis.log

port 6379
bind 127.0.0.1
timeout 300

loglevel notice

## Default configuration options
databases 16

save 900 1
save 300 10
save 60 10000

rdbcompression yes
dbfilename dump.rdb

appendonly no